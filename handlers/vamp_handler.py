from socket import create_connection

import random
from datetime import datetime, timedelta
import sqlite3
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from config import DATABASE_NAME

vamp_router = Router()


async def vamp(message, user_tg_id, conn):
    """–õ–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /vamp."""
    a = random.randint(0, 5)
    cur = conn.cursor()
    cur.execute("UPDATE users SET ttl_tryes = ttl_tryes + 1 WHERE tg = ?", (user_tg_id,))
    cur.execute("UPDATE users SET tryes_lmt = tryes_lmt + 1 WHERE tg = ?", (user_tg_id,))
    conn.commit()

    if a == 5:
        print(a, 102)
        await message.answer('‚ùåüî•–ù–µ—É–¥–∞—á–∞! –í—ã –Ω–∞—Ä–≤–∞–ª–∏—Å—å –Ω–∞ —Ö–∞–º–æ–Ω-—é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å—Å–∏–ª–∏–ª –≤–∞—Å. –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ '
                             '–ø–∏—Ç—å –∫—Ä–æ–≤—å —Å–ª–µ–¥—É—é—â–∏–µ 3 —á–∞—Å–∞')
        current_time = datetime.now()
        cur.execute("UPDATE users SET vamp_cd = ? WHERE tg = ?", (current_time, user_tg_id,))
        cur.execute("UPDATE users SET ttl_hamon = ttl_hamon + 1 WHERE tg = ?", (user_tg_id,))
        conn.commit()

    else:
        print(a, 103)
        x = random.randint(1, 3)
        cur.execute("SELECT ttl_blood_today, ttl_blood FROM users WHERE tg = ?", (user_tg_id,))
        result = cur.fetchall()
        blood = result[0][0] + x
        ttl_blood = result[0][1] + x
        cur.execute("UPDATE users SET ttl_blood_today = ?, ttl_blood = ? WHERE tg = ?", (blood, ttl_blood, user_tg_id,))
        conn.commit()
        await message.answer(
            f'‚úÖü©∏–£—Å–ø–µ—Ö! –í—ã –≤—ã–ø–∏–ª–∏ –∫—Ä–æ–≤—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–µ–≥–æ –∏ –ø–æ–ø–æ–ª–Ω–∏–Ω–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∑–∞–ø–∞—Å –∫—Ä–æ–≤–∏ –Ω–∞ {x} –ª.')
        cur.execute("UPDATE users SET ttl_human = ttl_human + 1 WHERE tg = ?", (user_tg_id,))
        conn.commit()


@vamp_router.message(Command("vamp"))
async def vamp_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /vamp."""
    user_tg_id = message.from_user.id


    with sqlite3.connect('vampdata.db') as conn:
        cur = conn.cursor()
        cur.execute('SELECT * FROM users WHERE tg = ?', (user_tg_id,))
        user = cur.fetchone()

        if user:
            vamp_cd = user[1]
            tryes_lmt = user[5]

            if vamp_cd or tryes_lmt >= 4:

                if vamp_cd:

                    remaining = datetime.now() - vamp_cd

                    if remaining >= timedelta(hours=3):
                        cur.execute("UPDATE users SET vamp_cd = NULL WHERE tg = ?", (user_tg_id,))
                        conn.commit()

                    else:
                        time_difference = timedelta(hours=3) - remaining
                        total_seconds = int(time_difference.total_seconds())
                        hours, remainder = divmod(total_seconds, 3600)
                        minutes, seconds = divmod(remainder, 60)
                        await message.answer(
                            f"‚ùåüïì –ü–æ–∫–∞ –Ω–µ–ª—å–∑—è. –¢—ã –æ–±–µ—Å—Å–∏–ª–µ–Ω, –ø–æ–¥–æ–∂–¥–∏ –µ—â–µ {hours}—á {minutes}–º {seconds}—Å")
                        return

                elif tryes_lmt:
                    cur.execute("SELECT ttl_blood_today FROM users WHERE tg = ?", (user_tg_id,))
                    ttl_blood_today = cur.fetchall()
                    ttl_blood_today = ttl_blood_today[0][0]
                    await message.answer(
                        f'‚ùåüïì–¢—ã —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª —Å–≤–æ–∏ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞. \n–ó–∞ —Å–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã–ø–∏–ª {ttl_blood_today} –ª. –∫—Ä–æ–≤–∏.')
                    return
            else:
                await vamp(message, user_tg_id, conn)
        else:
            cur.execute(
                "INSERT INTO users (tg, vamp_cd, ttl_blood_today, ttl_human, ttl_hamon, ttl_tryes, tryes_lmt, ttl_blood) "
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)", (user_tg_id, None, 0, 0, 0, 0, None, 0))
            conn.commit()
            await vamp(message, user_tg_id, conn)
