from mailbox import Message
from os import getenv
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, BotCommand, BotCommandScopeDefault
import random
from datetime import datetime, timedelta, time
import sqlite3
from aiogram import Dispatcher
from aiogram.filters import CommandStart

TOKEN = getenv('7414654605:AAHSv2FMzoy1DXMJn3cbu5fxD9HypewkqeY')


print('START')
user_dict = {}
dp = Dispatcher()
vamp_router = Router()
bot = Bot(token='7414654605:AAHSv2FMzoy1DXMJn3cbu5fxD9HypewkqeY')
profile_router = Router()
bug_router = Router()
top_router = Router()


async def vamp(message, user_tg_id, conn):
    a = random.randint(0, 5)
    cur = conn.cursor()
    cur.execute("UPDATE users SET ttl_tryes = ttl_tryes + 1 WHERE tg = ?", (user_tg_id,))
    cur.execute("UPDATE users SET tryes_lmt = tryes_lmt + 1 WHERE tg = ?", (user_tg_id,))
    conn.commit()

    if a == 5:
        await message.answer('‚ùåüî•–ù–µ—É–¥–∞—á–∞! –í—ã –Ω–∞—Ä–≤–∞–ª–∏—Å—å –Ω–∞ —Ö–∞–º–æ–Ω-—é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å—Å–∏–ª–∏–ª –≤–∞—Å. –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ '
                             '–ø–∏—Ç—å –∫—Ä–æ–≤—å —Å–ª–µ–¥—É—é—â–∏–µ 3 —á–∞—Å–∞')
        current_time = datetime.now()
        cur.execute("UPDATE users SET vamp_cd = ? WHERE tg = ?", (current_time, user_tg_id,))
        cur.execute("UPDATE users SET ttl_hamon = ttl_hamon + 1 WHERE tg = ?", (user_tg_id,))
        conn.commit()

    else:
        x = random.randint(1, 3)
        cur.execute("SELECT ttl_blood_today, ttl_blood FROM users WHERE tg = ?", (user_tg_id,))
        result = cur.fetchall()
        blood = result[0][0] + x
        ttl_blood = result[0][1] + x
        cur.execute("UPDATE users SET ttl_blood_today = ?, ttl_blood = ? WHERE tg = ?", (blood, ttl_blood, user_tg_id,))
        conn.commit()
        await message.answer(
            f'‚úÖü©∏–£—Å–ø–µ—Ö! –í—ã –≤—ã–ø–∏–ª–∏ –∫—Ä–æ–≤—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–µ–≥–æ –∏ –ø–æ–ø–æ–ª–Ω–∏–Ω–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∑–∞–ø–∞—Å –∫—Ä–æ–≤–∏ –Ω–∞ {x} –ª.')
        cur.execute("UPDATE users SET ttl_human = ttl_human + 1 WHERE tg = ?", (user_tg_id,))
        conn.commit()


with sqlite3.connect('vampdata17.db') as conn:
    cur = conn.cursor()
    cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY AUTOINCREMENT,
                tg INTEGER,
                vamp_cd DATETIME,
                ttl_blood_today INTEGER,
                ttl_human INTEGER,
                ttl_hamon INTEGER,
                ttl_tryes INTEGER,
                tryes_lmt INTEGER,
                ttl_blood INTEGER
                )
                """)
    conn.commit()


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –î–∏–æ. –î–∞-–¥–∞, —Å–∞–º –∞–≤—Ç–æ—Ä —ç—Ç–æ–≥–æ –±–æ—Ç–∞ - —Ç–æ—Ç —Å–∞–º—ã–π –≤–∞–º–ø–∏—Ä! \n–ü–æ–∫–∞ —è –±—É–¥—É'
                                      '—Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –î–∏–æ —Å–æ–ª–æ –∏ –Ω–µ —Å–æ–ª–æ, –∞ —Ç–∞–∫–∂–µ –±—É–¥—É –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ç–æ, —Å–∫–æ–ª—å–∫–æ'
                                      ' —Ç—ã –≤—ã–ø–∏–ª –∫—Ä–æ–≤–∏, —Ç–æ–ª—å–∫–æ –æ—Å—Ç–µ—Ä–µ–≥–∞–π—Å—è —Ö–∞–º–æ–Ω —é–∑–µ—Ä–æ–≤! –í —Ç–æ–º —á–∏—Å–ª–µ —è –ø–ª–∞–Ω–∏—Ä—É—é –¥–æ–±–∞–≤–∏—Ç—å'
                                      ' –≤ –±–æ—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∫–∞—Ä–º–∞–Ω–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é –î–∂–æ–î–∂–æ, –≤ '
                                      '–∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –≥–µ—Ä–æ–µ–º –∑–Ω–∞–º–µ–Ω–∏—Ç–æ–≥–æ –∞–Ω–∏–º–µ, –∏ –¥–∞, –Ω–µ —Ç–æ–ª—å–∫–æ –î–∏–æ, —è –Ω–µ –±—É–¥—É '
                                      '–æ–±–∏–∂–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–±—è, –µ—Å–ª–∏ —Ç—ã –ø–æ–π–¥–µ—à—å –ø–æ –ø—É—Ç–∏ –î–∂–æ—Å—Ç–∞—Ä–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å '
                                      '–¥–∞–∂–µ –î—å—è–≤–æ–ª–æ. –ë—É–¥—É –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω, –µ—Å–ª–∏ —Ç—ã –¥–æ–±–∞–≤–∏—à—å –±–æ—Ç–∞ –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ —á–∞—Ç. \n–ß—Ç–æ–±—ã –≤—ã–ø–∏—Ç—å'
                                      ' –∫—Ä–æ–≤—å, –Ω–∞–ø–∏—à–∏ /vamp, –Ω–∞ –¥–µ–Ω—å —É —Ç–µ–±—è –µ—Å—Ç—å —á–µ—Ç—ã—Ä–µ –ø–æ–ø—ã—Ç–∫–∏. \n–í –±—É–¥—É—â–µ–º —Ç—É—Ç –±—É–¥–µ—Ç '
                                      '–±–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥! –ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ —Å–∫–∞–∑–∞—Ç—å –î–∏–æ —Å–æ–ª–æ –∏–ª–∏ –î–∏–æ –Ω–µ —Å–æ–ª–æ.')


async def set_commands():
    commands = [BotCommand(command='vamp', description='–í—ã–ø–∏—Ç—å –∫—Ä–æ–≤—å'),
                BotCommand(command='top', description='–í—ã–≤–µ—Å—Ç–∏ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤'),
                BotCommand(command='bug', description='–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ')]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


@vamp_router.message(Command("vamp"))
async def vamp_handler(message: Message) -> None:
    user_tg_id = message.from_user.id

    with sqlite3.connect('vampdata17.db') as conn:
        cur = conn.cursor()
        cur.execute('SELECT * FROM users WHERE tg = ?', (user_tg_id,))
        user = cur.fetchone()

        if user:
            vamp_cd = user[2]
            tryes_lmt = user[6]

            if vamp_cd or tryes_lmt >= 4:

                if vamp_cd:
                    remaining = datetime.now() - datetime.strptime(vamp_cd, '%Y-%m-%d %H:%M:%S.%f')

                    if remaining >= timedelta(hours=3):
                        cur.execute("UPDATE users SET vamp_cd = NULL WHERE tg = ?", (user_tg_id,))
                        conn.commit()

                    else:
                        time_difference = timedelta(hours=3) - remaining
                        total_seconds = int(time_difference.total_seconds())
                        hours, remainder = divmod(total_seconds, 3600)
                        minutes, seconds = divmod(remainder, 60)
                        await message.answer(
                            f"‚ùåüïì –ü–æ–∫–∞ –Ω–µ–ª—å–∑—è. –¢—ã –æ–±–µ—Å—Å–∏–ª–µ–Ω, –ø–æ–¥–æ–∂–¥–∏ –µ—â–µ {hours}—á {minutes}–º {seconds}—Å")
                        return

                elif tryes_lmt:
                    cur.execute("SELECT ttl_blood_today FROM users WHERE tg = ?", (user_tg_id,))
                    ttl_blood_today = cur.fetchall()
                    ttl_blood_today = ttl_blood_today[0][0]
                    await message.answer(f'‚ùåüïì–¢—ã —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª —Å–≤–æ–∏ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞. \n–ó–∞ —Å–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã–ø–∏–ª {ttl_blood_today} –ª. –∫—Ä–æ–≤–∏.')
                    return
            else:
                await vamp(message, user_tg_id, conn)
        else:
            cur.execute("INSERT INTO users (tg, vamp_cd, ttl_blood_today, ttl_human, ttl_hamon, ttl_tryes, tryes_lmt, ttl_blood) "
                        "VALUES (?, ?, ?, ?, ?, ?, ?, ?)", (user_tg_id, None, 0, 0, 0, 0, None, 0))
            conn.commit()
            await vamp(message, user_tg_id, conn)


@profile_router.message(Command("profile"))
async def profile_handler(message: types.Message) -> None:
    with sqlite3.connect('vampdata17.db') as conn:
        user_tg_id = message.from_user.id
        cur = conn.cursor()
        cur.execute("SELECT ttl_hamon, ttl_human, ttl_blood, ttl_tryes FROM users WHERE tg = ?", (user_tg_id,))
        result = cur.fetchone()
        if result:
            ttl_hamon = result[0]
            ttl_human = result[1]
            ttl_blood = result[2]
            ttl_tryes = result[3]
            if ttl_tryes and ttl_human != None:
                human_rate = ttl_human / ttl_tryes
                human_rate = int(human_rate * 100)
                await message.answer(f"–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. "
                                      "\n========================"
                                      f"\n„Äå{ttl_hamon}„Äç| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∞–º–æ–Ω-—é–∑–µ—Ä–æ–≤"
                                      f"\n„Äå{ttl_human}„Äç| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π"
                                      f"\n„Äå{ttl_blood}„Äç| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –∫—Ä–æ–≤–∏"
                                      f"\n„Äå{ttl_tryes}„Äç| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"
                                      f"\n„Äå{human_rate}%„Äç| –ü—Ä–æ—Ü–µ–Ω—Ç –ª—é–¥–µ–π")
            else:
                ttl_hamon = 0 if ttl_hamon is None else ttl_hamon
                ttl_human = 0 if ttl_human is None else ttl_human
                ttl_blood = 0 if ttl_blood is None else ttl_blood
                ttl_tryes = 0 if ttl_tryes is None else ttl_tryes
                await message.answer(f"–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. "
                                      "\n========================"
                                      f"\n„Äå{ttl_hamon}„Äç| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∞–º–æ–Ω-—é–∑–µ—Ä–æ–≤"
                                      f"\n„Äå{ttl_human}„Äç| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π"
                                      f"\n„Äå{ttl_blood}„Äç| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –∫—Ä–æ–≤–∏"
                                      f"\n„Äå{ttl_tryes}„Äç| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"
                                      f"\n„Äå{0}%„Äç| –ü—Ä–æ—Ü–µ–Ω—Ç –ª—é–¥–µ–π")
        elif result == None:
            await message.answer("–û–π! –ù–∞ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def daily_reset(user_tg_id):
    with sqlite3.connect('vampdata17.db') as conn:
        cur = conn.cursor()
        current_time = datetime.now()
        cur.execute("SELECT day_cd FROM users WHERE user_tg_id = ?", (user_tg_id,))
        day_cd = cur.fetchall()
        day_cd = day_cd[0]
        current_time = current_time.strftime('%H:%M:%S')
        current_time = datetime.strptime(current_time, '%Y-%m-%d')
        day_cd = datetime.strptime(day_cd, '%Y-%m-%d')
        if current_time > day_cd:
            cur.execute("UPDATE users SET day_cd = 0 WHERE user_tg_id = ?", (user_tg_id,))
            conn.commit()


@bug_router.message(Command('bug'))
async def bug(message: Message) -> None:
    user_text = message.text.lower()
    if len(user_text) > 250:
        await message.answer('–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ. –û–±—Ä–∞—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –º–∞–∫—Å–∏–º—É–º –¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤.')
    else:
        user_text = user_text.replace("/bug ", "")
        try:
             await bot.send_message(1647244236, f'{user_text}')
             await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –æ–∂–∏–¥–∞–π—Ç–µ.")
        except Exception as e:
             await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: {e}")



@top_router.message(Command('top'))
async def top(message: Message) -> None:
    with sqlite3.connect('vampdata17.db') as conn:
        cur = conn.cursor()
        cur.execute("SELECT tg, ttl_blood, ttl_tryes, ttl_human, ttl_hamon FROM users ORDER BY ttl_blood DESC")
        result = cur.fetchall()
        final_message = "–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç —Ç–æ–ø-15 –≤–∞–º–ø–∏—Ä–æ–≤:\n"  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ —Ü–∏–∫–ª–∞
        medals = ["ü•á", "ü•à", "ü•â"]
        for row in range(min(len(result), 15)):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 15 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            user_tg_id = result[row][0]
            ttl_blood = result[row][1]
            ttl_tryes = result[row][2]
            ttl_human = result[row][3]
            ttl_hamon = result[row][4]
            user_info = await bot.get_chat(user_tg_id)
            username = user_info.username if user_info.username else "–ë–µ–∑ –Ω–∏–∫–∞"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∏–∫–∞
            medal = medals[row] if row < len(medals) else ""
            final_message += f"{medal} {row + 1}. {username} - –≤—ã–ø–∏—Ç–æ –∫—Ä–æ–≤–∏: {ttl_blood} –ª., —Ö–∞–º–æ–Ω-—é–∑–µ—Ä–æ–≤: {ttl_hamon}, –∂–µ—Ä—Ç–≤: {ttl_human}, –ø–æ–ø—ã—Ç–æ–∫: {ttl_tryes}\n"
        await message.answer(final_message)


async def main() -> None:
    dp.include_router(vamp_router)
    dp.include_router(profile_router)
    dp.include_router(bug_router)
    dp.include_router(top_router)
    await dp.start_polling(bot, skip_updates=True)
    await bot.delete_webhook(drop_pending_updates=True)
    await set_commands()


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
